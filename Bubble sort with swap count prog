Given an array of integers, write a function that sorts the array using the Bubble Sort algorithm. While sorting, count the total number of adjacent swaps made and return this count.

Input Format

3
3 2 1
Constraints

The array may contain duplicate values. 1 ≤ array length ≤ 1,000 -1,000 ≤ array elements ≤ 1,000

Output Format

1 2 3
3
Sample Input 0

5
5 1 4 2 8
Sample Output 0

1 2 4 5 8
4


#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n, int &swapCount) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
                swapCount++;
            }
        }
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
  
        int n;
        
        cin >> n;

        int arr[n];
       
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }

        int swapCount = 0;
        bubbleSort(arr, n, swapCount);

       
        printArray(arr, n);
        cout<< swapCount << endl;
        cout << endl;
        return 0;
}

